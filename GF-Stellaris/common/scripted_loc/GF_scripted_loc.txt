# Allows you to create your own dynamic keys to be called in localization.

# defined_text = {
# 	name = GetExampleText 					#The key to refer to in locs, e.g. [Root.GetExampleText]
# 	random = no								#If "random = no" is specified (default is "yes"), it will pick the entry with the highest weight (rather than weighted
# 											#random among valid entries). If several entries have the same weight (or none is specified), the first will be picked.
# 	text = {
# 		localization_key = text_something	#The loc key used if this text entry is picked.
# 		trigger = {							#Triggers that determine if this text entry can be picked.
# 		}
# 		weight = {							#Weight field to determine how likely this one is to be picked if multiple are possible.
# 			weight = 1 						#Works like weight fields everywhere, with modifiers etc. Weight is 1 if not specified.
# 			modifier = {
# 				factor = 2
# 			}
# 		}
# 	}
# 	text = { 								#You can specify as many text entries as you want
# 		localization_key = text_something_else
# 		trigger = {
# 		}
# 	}
# 	default = default_text 					#You can specify a default text, which is used in case the triggers of all entries fail.
# }


# You can also do this to use script values in loc:
# defined_text = {
# 	name = scripted_value_test
# 	value = value:desired_science_ships_system_mult
# }

# this = planet
defined_text = {
	name = GF_GetElidThreatLevel
	text = {
		localization_key = GF_elid_threat_level_low
		trigger = {
			check_variable = {
				which = v_GF_elid_threat_level
				value <= @GF_elid_threat_low_threshold
			}
		}
	}
	text = {
		localization_key = GF_elid_threat_level_mid
		trigger = {
			check_variable = {
				which = v_GF_elid_threat_level
				value > @GF_elid_threat_low_threshold
			}
			check_variable = {
				which = v_GF_elid_threat_level
				value <= @GF_elid_threat_mid_threshold
			}
		}
	}
	default = GF_elid_threat_level_high
}

defined_text = {
	name = GF_Get_OGAS_Connection_Title

	text = {
		localization_key = GF_text_OGAS_connection_title_owner
		trigger = {
			has_authority = GF_auth_commonwealth
		}
	}
	default = GF_text_OGAS_connection_title_subnet
	
}

# scope = planet
defined_text = {
	name = GetVolatileMotesIconIfAvailable
	text = {
		localization_key = volatile_motes_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_volatile_motes
					has_technology = tech_mine_volatile_motes
				}
			}
		}
	}
	default = BLANK_STRING
}
defined_text = {
	name = GetExoticGasesIconIfAvailable
	text = {
		localization_key = exotic_gases_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_exotic_gases
					has_technology = tech_mine_exotic_gases
				}
			}
		}
	}
	default = BLANK_STRING
}
defined_text = {
	name = GetRareCrystalsIconIfAvailable
	text = {
		localization_key = rare_crystals_icon
		trigger = {
			owner = {
				OR = {
					has_technology = tech_rare_crystals
					has_technology = tech_mine_rare_crystals
				}
			}
		}
	}
	default = BLANK_STRING
}

# scope = situation
defined_text = {
	name = GF_GetCoreChipDeficitStageSecondTooltip
	text = {
		localization_key = GF_core_chip_deficit_malfunction_doll_leader_modifier
		trigger = {
			current_stage = deficit_second
		}
	}
	default = BLANK_STRING
}

# scope = situation
defined_text = {
	name = GF_GetCoreChipDeficitStageThirdTooltip
	text = {
		localization_key = GF_core_chip_deficit_malfunction_doll_leader_and_pop_modifier
		trigger = {
			current_stage = deficit_third
		}
	}
	default = BLANK_STRING
}

# scope = country
defined_text = {
	name = GetGFOrbMainframeAlphaDesc
	text = {
		localization_key = GF_relic_orb_mainframe_alpha_desc_can_activate
		trigger = {
			has_country_flag = flag_GF_artifact_analyse_orb_mainframe_alpha_finished
		}
	}
	default = GF_relic_orb_mainframe_alpha_desc_no_activation
}

# this = country
defined_text = {
	name = GetGFOrbMainframeSigmaDesc
	text = {
		localization_key = GF_relic_orb_mainframe_sigma_desc_can_activate
		trigger = {
			always = no
		}
	}
	default = GF_relic_orb_mainframe_sigma_desc_no_activation
}

defined_text = {
	name = GF_GetOGASThreads
	value = value:GF_get_OGAS_threads_cap
}
defined_text = {
	name = GF_GetOGASThreadsUsed
	value = value:GF_get_OGAS_threads_used
}

# !!! Effect Button Only !!!
defined_text = {
	name = GF_GetAutomatedCityDistrict_1_Desc
	text = {
		localization_key = district_GF_automated_energy_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_base_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_foundry_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_research_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_special_resources }
		}
	}
	default = test_fall_back
}
defined_text = {
	name = GF_GetAutomatedCityDistrict_2_Desc
	text = {
		localization_key = district_GF_automated_mining_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_base_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_industry_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_factory_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_special_resources }
		}
	}
	default = test_fall_back
}
defined_text = {
	name = GF_GetAutomatedCityDistrict_3_Desc
	text = {
		localization_key = district_GF_automated_farming_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_base_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_refinery_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
		}
	}
	text = {
		localization_key = district_GF_automated_collapse_desc_spec
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_special_resources }
		}
	}
	default = test_fall_back
}
defined_text = {
	name = GF_GetAutomatedCitySpecialistTypeEB
	text = {
		localization_key = GFAutomatedCityBaseResource
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_base_resources }
		}
	}
	text = {
		localization_key = GFAutomatedCityAdvancedResource
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
		}
	}
	text = {
		localization_key = GFAutomatedCitySpecialResource
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_special_resources }
		}
	}
	default = GF_GetAutomatedCitySpecialistTypeEBNone
}
defined_text = {
	name = GF_GetAutomatedCitySpecialistTypeEBDesc
	text = {
		localization_key = GFAutomatedCityBaseResourceDesc
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_base_resources }
		}
	}
	text = {
		localization_key = GFAutomatedCityAdvancedResourceDesc
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
		}
	}
	text = {
		localization_key = GFAutomatedCitySpecialResourceDesc
		trigger = {
			event_target:auto_city = { has_planet_flag = flag_p_GF_automated_city_special_resources }
		}
	}
	default = GF_GetAutomatedCitySpecialistTypeEBNoneDesc
}

# scope = planet
defined_text = {
	name = GF_GetAutomatedCitySpecialistType
	text = {
		localization_key = GFAutomatedCityBaseResource
		trigger = { has_planet_flag = flag_p_GF_automated_city_base_resources }
	}
	text = {
		localization_key = GFAutomatedCityAdvancedResource
		trigger = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }
	}
	text = {
		localization_key = GFAutomatedCitySpecialResource
		trigger = { has_planet_flag = flag_p_GF_automated_city_special_resources }
	}
	default = BLANK_STRING
}

# scope = planet
defined_text = {
	name = GF_GetSystemMaintenance
	text = {
		localization_key = GFSystemMaintenanceGood
		trigger = {
			check_modifier_value = {
				modifier = GF_system_maintenance
				value >= 0.5
			}
		}
	}
	text = {
		localization_key = GFSystemMaintenanceMid
		trigger = {
			check_modifier_value = {
				modifier = GF_system_maintenance
				value < 0.5
			}
			check_modifier_value = {
				modifier = GF_system_maintenance
				value >= 0.25
			}
		}
	}
	text = {
		localization_key = GFSystemMaintenanceLow
		trigger = {
			check_modifier_value = {
				modifier = GF_system_maintenance
				value < 0.25
			}
			check_modifier_value = {
				modifier = GF_system_maintenance
				value >= 0
			}
		}
	}
	text = {
		localization_key = GFSystemMaintenanceLowNeg
		trigger = {
			check_modifier_value = {
				modifier = GF_system_maintenance
				value < 0
			}
		}
	}
}

# scope = planet
defined_text = {
	name = GF_GetSystemMaintenancePercentage
	value = value:GF_get_system_maintenance_percentage
}

# this = country
defined_text = {
	name = GF_GetZionFavor
	text = {
		trigger = { GF_has_zion_favor_high = yes }
		localization_key = GF_zion_favor_high
	}
	text = {
		trigger = { GF_has_zion_favor_low = yes }
		localization_key = GF_zion_favor_low
	}
	default = GF_zion_favor_mid
}