# Defines the different values available for given Agreement terms. The terms are defined in agreement_terms scripts.
# The term values contain the main logic of Agreement terms, including the modifiers and effects.
# For Subject Agreements, the owner is the overlord and the target is the subject.

# Example:
#
# name_of_term_value = {
# 	term = name_of_term 					# References the term in agreement_terms that this value applies to
#
# 	owner_modifier = {						# A modifier that applies to the Agreement owner country. Can stack multiple times.
# 		my_owner_modifier = 1
# 	}
# 	target_modifier = {						# A modifier that applies to the Agreement target country. Can stack multiple times.
# 		my_target_modifier = 1
# 	}
# 	unique_owner_modifier = {				# A modifier that applies to the Agreement owner country. Only applies once.
# 		my_unique_owner_modifier = 1
# 	}
# 	unique_target_modifier = {				# A modifier that applies to the Agreement target country. Only applies once.
# 		my_unique_target_modifier = 1
# 	}
# 	loyalty_change = value					# How much the subject's loyalty will change when a new agreement with this term starts
# 	ai_acceptance = {
#		overlord = 1						# Willingness of AI overlord to accept this term
#		subject = 1							# Willingness of AI subject to accept this term
#	}
# 	triggered_loyalty_change = {			# How much the subject's loyalty will additionally change when a new agreement with this term starts, if "trigger" is true
# 		trigger = {
# 			agreement_scope_trigger
# 		}
# 		loyalty_change = value
#		ai_acceptance = {
#			overlord = 1
#			subject = 1
#		}
# 	}
# 	extra_term_text_subject = <LOC_KEY> 	# What should be shown in the "extra terms" panel for the subject if this term value is active (default is to not show it)
# 											# This loc key can use $SUBJECT$ and $OVERLORD$ to show the name of the relevant empire, and $MODIFIER$ to show the modifiers applying to the subject
# 	extra_term_text_overlord = <LOC_KEY>	# What should be shown in the "extra terms" panel for the overlord if this term value is active (default is to not show it)
# 											# Loc key can use $SUBJECT$ and $OVERLORD$ to show the name of the relevant empire, $MODIFIER$ for the overlord's modifiers, and $RESOURCES$ for the net resources it gains
# }
#
# name_of_resource_term_value = {
# 	term = name_of_resource_term
#	resource = <resource> (food/alloys/...)
# }


GF_specialist_OGAS_subnet = {
	term = specialist_type

	loyalty_change = 40

	activate_effect = {
		convert_to_specialist = GF_specialist_OGAS_subnet
	}

	target_modifier = {
		monthly_loyalty = 8
	}
	triggered_loyalty_change = {
		trigger = {
			target = {
				OR = {
					is_spiritualist = yes
					is_megacorp = yes
				}
			}
		}
		loyalty_change = -10000
		ai_acceptance = {
			overlord = -10000
			subject = -10000
		}
	}
	triggered_loyalty_change = {
		trigger = {
			has_term_value = {
				term = subject_integration
				value = subject_can_be_integrated
			}
		}
		loyalty_change = 50
	}

	potential = {
		agreement_preset = GF_preset_OGAS_subnet
	}
}

GF_specialist_OGAS_subnet_loyalty_effect = {
	term = subject_loyalty

	activate_effect = {
		target = { save_event_target_as = new_subject }
		owner = {
			every_subject = {
				erase_modifier = { MOD = divided_patronage }
			}
			if = {
				limit = {
					NOT = { has_ascension_perk = ap_shared_destiny }
					subjects > 1
				}
				set_variable = { which = subjects_minus_one value = trigger:subjects }
				subtract_variable = { which = subjects_minus_one value = 1 }
				every_subject = {
					limit = { NOT = { any_agreement = { has_active_specialization = GF_specialist_OGAS_subnet } } }
					add_modifier = {
						modifier = divided_patronage
						multiplier = PREV.subjects_minus_one
					}
				}
				clear_variable = subjects_minus_one
			}
			every_spynetwork = {
				limit = {
					target = { is_same_value = event_target:new_subject }
					NOT = { has_modifier = domestic_intelligence }
				}
				add_modifier = { modifier = domestic_intelligence }
			}
		}
		target = {
			add_ethics_compatibility_modifier = yes
			every_spynetwork = {
				limit = {
					target = { is_same_value = PREVPREV.overlord }
					NOT = { has_modifier = domestic_intelligence }
				}
				add_modifier = { modifier = domestic_intelligence }
			}
		}
		if = {
			limit = {
				target = { is_galactic_community_member = yes }
				OR = {
					is_active_resolution = resolution_bureaucraticsurveillance_administrative_insight
					is_active_resolution = resolution_bureaucraticsurveillance_borderless_authority
					is_active_resolution = resolution_bureaucraticsurveillance_personal_oversight
				}
			}
			target = { galcom_subject_ethic_modifier_effect = yes }
		}
	}

	deactivate_effect = {
		target = { save_event_target_as = leaving_subject }
		owner = {
			refresh_subject_count_loyalty_penalty = yes
			every_spynetwork = {
				limit = { target = { is_same_value = event_target:leaving_subject } }
				erase_modifier = { MOD = domestic_intelligence }
			}
			save_event_target_as = current_overlord
		}
		target = {
			every_spynetwork = {
				limit = { target = { is_same_value = event_target:current_overlord } }
				erase_modifier = { MOD = domestic_intelligence }
			}
			erase_modifier = { MOD = commanding_presence }
			erase_modifier = { MOD = divided_patronage }
			erase_modifier = { MOD = overlord_ethics_compatibility }
			erase_modifier = { MOD = newly_released_sector_loyalty }
			erase_modifier = { MOD = newly_subjugated_loyalty }
		}
		target = { galcom_subject_remove_ethic_modifier_effect = yes }
	}
	
	potential = { agreement_preset = GF_preset_OGAS_subnet }
}