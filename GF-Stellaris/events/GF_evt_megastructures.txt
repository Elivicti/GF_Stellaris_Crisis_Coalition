namespace = GF_mega

# from = megastructure
country_event = {
	id = GF_mega.100
	title = GF_mega.100.name
	desc = GF_mega.100.desc
	show_sound = event_dyson_sphere_build_start
	location = from

	picture = GFX_evt_megastructure_construction

	is_triggered_only = yes

	option = {
		name = GF_mega.100.a
	}
}
country_event = {
	id = GF_mega.101
	title = GF_mega.101.name
	desc = GF_mega.101.desc
	show_sound = event_dyson_sphere_build_upgrade_frame
	location = from

	picture = GFX_evt_GF_OGAS_computing_center

	is_triggered_only = yes

	option = {
		name = GF_mega.101.a
	}
}
country_event = {
	id = GF_mega.102
	title = GF_mega.102.name
	desc = GF_mega.102.desc
	show_sound = event_dyson_sphere_build_upgrade_panel
	location = from

	picture = GFX_evt_GF_OGAS_computing_center

	is_triggered_only = yes

	option = {
		name = GF_mega.102.a
	}
}
country_event = {
	id = GF_mega.103
	title = GF_mega.103.name
	desc = GF_mega.103.desc
	show_sound = event_think_tank_build_upgrade
	location = from

	picture = GFX_evt_GF_OGAS_computing_center

	is_triggered_only = yes

	option = {
		name = GF_mega.103.a
	}
}
country_event = {
	id = GF_mega.104
	title = GF_mega.104.name
	desc = GF_mega.104.desc
	show_sound = event_think_tank_build_complete
	location = from

	picture = GFX_evt_GF_OGAS_computing_center

	is_triggered_only = yes

	option = {
		name = GF_mega.104.a
	}
}

@GF_computing_center_expire_date_limit = 90
@GF_computing_center_expire_date_limit_expire = 120

# on_megastructure_change_owner
# this = new owner
# from = megastructure
# fromfrom = old owner (if existing)
country_event = {
	id = GF_mega.181
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		NOT = { has_technology = GF_tech_ogas_computing_center }
		from = { GF_is_computing_center = yes }
	}

	immediate = {
		random_playable_country = {
			limit = {
				from = { has_megastructure_flag = flag_mega_GF_computing_center_@prev }
			}
			save_event_target_as = old_owner
		}
		from = {
			set_saved_date = {
				key = computing_center_expire_date
				days_from_present = @GF_computing_center_expire_date_limit
				expires = @GF_computing_center_expire_date_limit_expire
			}
			solar_system = {
				system_event = {
					id = GF_mega.185
					days = @GF_computing_center_expire_date_limit
					scopes = {
						from = prevprev.from
						fromfrom = event_target:old_owner
					}
				}
			}
		}
		if = {
			limit = { exists = event_target:old_owner }
			event_target:old_owner = {
				country_event = {
					id = GF_mega.190
					scopes = { from = prev.from }
				}
			}
		}
		else = {
			GF_remove_computing_center_effect = { target = from }
			# remove_megastructure = from
		}
	}
}

# on_megastructure_ownerless
# Executed when a megastructure is rendered ownerless
# this = solar system containing megastructure
# from = megastructure
# fromfrom = old owner (if existing)
system_event = {
	id = GF_mega.182
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { GF_is_computing_center = yes }
	}

	immediate = {
		if = {
			limit = { exists = fromfrom }
			from = {
				set_saved_date = {
					key = computing_center_expire_date
					days_from_present = @GF_computing_center_expire_date_limit
					expires = @GF_computing_center_expire_date_limit_expire
				}
				save_event_target_as = center
			}
			system_event = {
				id = GF_mega.185
				days = @GF_computing_center_expire_date_limit
				scopes = {
					from = from
					fromfrom = fromfrom
				}
			}
			fromfrom = {
				country_event = {
					id = GF_mega.190
					scopes = { from = prev.from }
				}
			}
		}
		else = {
			GF_remove_computing_center_effect = { target = from }
			# remove_megastructure = from
		}
	}
}

# this = new owner
# from = megastructure
# fromfrom = old owner (if existing)
country_event = {
	id = GF_mega.184
	title = GF_mega.184.name
	desc = GF_mega.184.desc
	location = from.solar_system

	picture = GFX_evt_megastructure_construction

	is_triggered_only = yes
	trigger = {
		has_technology = GF_tech_ogas_computing_center
		from = { GF_is_computing_center = yes }
	}

	option = {
		name = GF_mega.184.a
	}
}

system_event = {
	id = GF_mega.185
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		OR = {
			NOT = { exists = space_owner }
			space_owner = {
				NOT = { has_technology = GF_tech_ogas_computing_center }
			}
		}
	}

	immediate = {
		if = {
			limit = { exists = fromfrom }
			fromfrom = {
				country_event = {
					id = GF_mega.191
					scopes = { from = prev }
				}
			}
		}
		GF_remove_computing_center_effect = { target = from }
		# remove_megastructure = from
	}
}


# from = megastructure
country_event = {
	id = GF_mega.190
	title = GF_mega.190.name
	desc = GF_mega.190.desc
	location = from.solar_system

	picture = GFX_evt_megastructure_construction

	is_triggered_only = yes

	option = {
		name = GF_mega.190.a
		hidden_effect = {
			GF_check_OGAS_threads_over_cap_effect = { from = from.solar_system }
		}
	}
}

# from = system
country_event = {
	id = GF_mega.191
	title = GF_mega.191.name
	desc = GF_mega.191.desc
	location = from

	picture = GFX_evt_large_explosion

	is_triggered_only = yes

	immediate = {
		remove_country_flag = flag_GF_has_built_computing_center
	}

	option = {
		name = GF_mega.191.a
	}
}

# 拆除OGAS计算中心
# from = country
system_event = {
	id = GF_mega.195
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		every_ambient_object = {
			limit = { has_ambient_object_flag = GF_computing_center_ambient }
			destroy_ambient_object = this
		}
		from = {
			remove_country_flag = flag_GF_has_built_computing_center
			country_event = {
				id = GF_mega.196
				scopes = { from = prev }
			}
		}
	}
}
# OGAS计算中心拆除完成通知
# from = system
country_event = {
	id = GF_mega.196
	title = GF_mega.196.name
	desc = GF_mega.196.desc

	location = from
	show_sound = event_think_tank_build_start
	picture = GFX_evt_megastructure_construction

	is_triggered_only = yes
	trigger = { has_technology = GF_tech_ogas_computing_center }

	option = {
		name = GF_mega.196.a
	}
}

# 伯劳生物战舰主巢
# from = megastructure
country_event = {
	id = GF_mega.200
	title = GF_mega.200.name
	desc = GF_mega.200.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.200.a
	}
}
country_event = {
	id = GF_mega.201
	title = GF_mega.201.name
	desc = GF_mega.201.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.201.a
	}
}
country_event = {
	id = GF_mega.202
	title = GF_mega.202.name
	desc = GF_mega.202.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.202.a
	}
}
country_event = {
	id = GF_mega.203
	title = GF_mega.203.name
	desc = GF_mega.203.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.202.a
	}
}
country_event = {
	id = GF_mega.204
	title = GF_mega.204.name
	desc = GF_mega.204.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.204.a
	}
}


country_event = {
	id = GF_mega.210
	title = GF_mega.210.name
	desc = GF_mega.210.desc

	location = from
	is_triggered_only = yes

	option = {
		name = GF_mega.210.a
	}
}


##### 逆向坍塌星门
country_event = {
	id = GF_mega.300
	title = GF_mega.300.name
	desc = GF_mega.300.desc
	show_sound = event_radio_chatter
	location = from

	picture = GFX_evt_drifting_gateway

	is_triggered_only = yes
	trigger = {
		is_GF_authority = yes
	}
	immediate = {
		from = { save_event_target_as = gateway_system }
	}

	option = {
		name = EXCELLENT
	}
}

# A Megastructure has been upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
country_event = {
	id = GF_mega.310
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from = {
			OR = {
				is_megastructure_type = gateway_final
				is_megastructure_type = gateway_restored
			}
		}
		fromfrom = {
			OR = {
				has_star_flag = flag_s_GF_reverse_collapse_gateway_node
				has_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
			}
		}
	}

	immediate = {
		fromfrom = {
			if = {
				limit = {
					NOT = {
						any_system_megastructure = { is_megastructure_type = GF_reverse_collapse_gateway }
					}
				}
				remove_star_flag = flag_s_GF_reverse_collapse_gateway_node
			}
			if = {
				limit = {
					NOT = { any_system_megastructure = { is_megastructure_type = GF_reverse_collapse_beacon } }
				}
				remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
			}
		}
	}
}

# on_single_player_save_game_load
event = {
	id = GF_mega.320
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		every_system = {
			limit = { has_star_flag = flag_s_GF_reverse_collapse_gateway_beacon }
			if = {
				limit = {
					any_system_megastructure = {
						is_megastructure_type = GF_reverse_collapse_beacon
					}
				}
				random_system_megastructure = {
					limit = { is_megastructure_type = GF_reverse_collapse_beacon }
					save_event_target_as = beacon
				}
				random_fleet_in_system = {
					limit = { has_fleet_flag = flag_f_GF_RC_beacon_defense_station }
					set_location = event_target:beacon
					fleet_event = {
						id = GF_mega.321
						days = 1
					}
				}
			}
			else = {
				remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
			}
		}
	}
}
fleet_event = {
	id = GF_mega.321
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:beacon = {
			set_owner = prev.owner
			if = {
				limit = { NOT = { has_megastructure_flag = flag_mega_GF_will_expire } }
				set_megastructure_flag = flag_mega_GF_will_expire
				prevprev = {
					fleet_event = {
						id = GF_mega.332
						days = @GF_reverse_collapse_beacon_expire_days
					}
				}
			}
		}
	}
}

# 舰队行动：部署信标失败
planet_event = {
	id = GF_mega.329
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			from.owner = {
				NOT = {
					any_owned_design = {
						is_ship_size = GF_RC_beacon_military_station
					}
				}
			}
			solar_system = {
				OR = {
					has_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
					has_star_flag = flag_s_GF_reverse_collapse_gateway_node
				}
			}
		}
	}

	immediate = {
		from.owner = {
			create_message = {
				type = MESSAGE_TYPE_GF_REVERSE_BEACON_DEPLOYMENT_FAILED
				localization = MESSAGE_GF_REVERSE_BEACON_DEPLOYMENT_FAILED_DESC
				target = prev
				days = 30
				variable = {
					type = name
					localization = PLANET
					scope = prev
				}
			}
		}
	}
}
# 舰队行动：部署信标
planet_event = {
	id = GF_mega.330
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		from.owner = {
			any_owned_design = {
				is_ship_size = GF_RC_beacon_military_station
			}
		}
		solar_system = {
			NOR = {
				has_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
				has_star_flag = flag_s_GF_reverse_collapse_gateway_node
			}
		}
	}

	immediate = {
		from.owner = {
			random_owned_design = {
				limit = {
					is_ship_size = GF_RC_beacon_military_station
				}
				save_event_target_as = GF_RC_beacon_station_design
			}
		}
		solar_system = {
			spawn_megastructure = {
				type = GF_reverse_collapse_beacon
				planet = prev
				owner = prev.from
				init_effect = {
					create_fleet = {
						name = NAME_GF_RC_beacon_station
						settings = {
							can_disband = no
						}
						effect = {
							set_owner = from.owner
							set_location = prev
							create_ship = {
								name = NAME_GF_RC_beacon_station
								design = event_target:GF_RC_beacon_station_design
							}
							save_global_event_target_as = GF_RC_beacon_defense@from
							save_event_target_as = tmp
							set_fleet_flag = flag_f_GF_RC_beacon_defense_station
							fleet_event = {
								id = GF_mega.331
								days = 30
							}
							fleet_event = {
								id = GF_mega.332
								days = @GF_reverse_collapse_beacon_expire_days
							}
						}
					}
					set_megastructure_flag = flag_mega_GF_will_expire
					save_global_event_target_as = GF_RCbeacon@event_target:tmp
				}
			}
		}
		from = {
			save_global_event_target_as = GF_RC_beacon_fleet@event_target:tmp
			set_fleet_flag = flag_f_GF_RC_beacon_deployed
			set_saved_date = {
				key = GF_RC_beacon_expire_date
				days_from_present = @GF_reverse_collapse_beacon_expire_days
			}
			owner = {
				create_message = {
					type = MESSAGE_TYPE_GF_REVERSE_BEACON_DEPLOYED
					target = prevprev
					localization = MESSAGE_GF_REVERSE_BEACON_DEPLOYED_DESC
					days = 30
					variable = {
						type = name
						localization = PLANET
						scope = prevprev
					}
					variable = {
						type = name
						localization = FLEET
						scope = prev
					}
				}
			}
		}
	}
}
# 月检，处理一些特殊情况下信标的所有权被移交的情况
fleet_event = {
	id = GF_mega.331
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:GF_RCbeacon@this = {
			set_owner = prev.owner
		}
		fleet_event = {
			id = GF_mega.331
			days = 30
		}
	}
}
# 定时移除
fleet_event = {
	id = GF_mega.332
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		event_target:GF_RCbeacon@this = {
			planet = {
				save_event_target_as = orbiting_planet
			}
		}
		event_target:GF_RC_beacon_fleet@this = {
			save_event_target_as = beacon_fleet
			GF_set_RC_beacon_fleet_cooldown = yes
		}
		owner = {
			create_message = {
				type = MESSAGE_TYPE_GF_REVERSE_BEACON_DISMANTLED
				target = event_target:orbiting_planet
				localization = MESSAGE_GF_REVERSE_BEACON_EXPIRED_DESC
				days = 30
				variable = {
					type = name
					localization = PLANET
					scope = event_target:orbiting_planet
				}
				variable = {
					type = name
					localization = FLEET
					scope = event_target:beacon_fleet
				}
			}
		}
		solar_system = {
			remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
		}
		remove_megastructure = event_target:GF_RCbeacon@this
		delete_fleet = this
	}
}

# 支援舰被解散
# This = owner of fleet
# From = disbanded fleet
country_event = {
	id = GF_mega.333
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = {
			has_fleet_flag = flag_f_GF_RC_beacon_deployed
		}
	}
	immediate = {
		event_target:GF_RC_beacon_defense@from = {
			save_event_target_as = tmp
			solar_system = {
				remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
			}
		}
		create_message = {
			type = MESSAGE_TYPE_GF_REVERSE_BEACON_DISMANTLED
			localization = MESSAGE_GF_REVERSE_BEACON_DISMANTLED_DESC
			target = event_target:GF_RCbeacon@event_target:tmp.planet
			days = 30
			variable = {
				type = name
				localization = PLANET
				scope = event_target:GF_RCbeacon@event_target:tmp.planet
			}
		}
		remove_megastructure = event_target:GF_RCbeacon@event_target:tmp
		delete_fleet = event_target:GF_RC_beacon_defense@from
	}
}

# 支援舰或基站被摧毁
# This = owner of fleet 1 (destroyed)
# From = owner of fleet 2 (combatant)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = GF_mega.334
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		fromfrom = {
			has_fleet_flag = flag_f_GF_RC_beacon_deployed
		}
	}

	immediate = {
		event_target:GF_RC_beacon_defense@fromfrom = {
			save_event_target_as = tmp
			solar_system = {
				remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
			}
		}
		create_message = {
			type = MESSAGE_TYPE_GF_REVERSE_BEACON_DESTROYED
			localization = MESSAGE_GF_REVERSE_BEACON_DESTROYED_DESC
			target = event_target:GF_RCbeacon@event_target:tmp.planet
			days = 30
			variable = {
				type = name
				localization = PLANET
				scope = event_target:GF_RCbeacon@event_target:tmp.planet
			}
		}
		remove_megastructure = event_target:GF_RCbeacon@event_target:tmp
		delete_fleet = event_target:GF_RC_beacon_defense@fromfrom
	}
}
country_event = {
	id = GF_mega.335
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		fromfrom = {
			has_fleet_flag = flag_f_GF_RC_beacon_defense_station
		}
	}

	immediate = {
		fromfrom.solar_system = {
			remove_star_flag = flag_s_GF_reverse_collapse_gateway_beacon
		}
		create_message = {
			type = MESSAGE_TYPE_GF_REVERSE_BEACON_DESTROYED
			localization = MESSAGE_GF_REVERSE_BEACON_DESTROYED_DESC
			target = event_target:GF_RCbeacon@fromfrom.planet
			days = 30
			variable = {
				type = name
				localization = PLANET
				scope = event_target:GF_RCbeacon@fromfrom.planet
			}
		}
		remove_megastructure = event_target:GF_RCbeacon@fromfrom
		event_target:GF_RC_beacon_fleet@fromfrom = {
			GF_set_RC_beacon_fleet_cooldown = yes
		}
	}
}
