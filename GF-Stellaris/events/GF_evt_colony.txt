namespace = GF_colony

### Auto Colony
@GF_auto_colony_boundary_effect_interval = 30
@GF_auto_colony_boundary_start = 15
@GF_auto_colony_boundary_addend = 25

# 计算方式：factor = (equivalent_pop_load - capacity) / addend
# equivalent_pop_load = num_pops - 休眠人形数 * 0.75 (等价于：每人口产生1负载，休眠人形产生0.25负载)
# capacity = start + mod_capacity_add
# 边际效应Debuff从第(capacity + 1)个人口开始起作用，直到第(capacity + addend)个人口时，factor = 1
# 由于mod_capacity_add不是整数，所以理论上factor = 1时的人口数大概率不是整数，但是并不影响整体的效果
# factor的计算无上限
# factor将与边际效应Debuff相乘
planet_event = {
	id = GF_colony.10
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		has_modifier = GF_auto_colony
	}

	immediate = {
		set_variable = {
			which = v_GF_auto_colony_equivalent_pop_load
			value = 0
		}
		set_variable = {
			# modifier = GF_auto_colony_capacity_add
			which = v_GF_auto_colony_capacity
			value = modifier:GF_auto_colony_capacity_add
		}
		change_variable = {
			which = v_GF_auto_colony_capacity
			value = @GF_auto_colony_boundary_start
		}
		every_owned_pop = {
			if = {
				limit = { has_job = GF_dormancy_doll }
				prev = {
					change_variable = {
						which = v_GF_auto_colony_equivalent_pop_load
						value = 0.25
					}
				}
			}
			else = {
				prev = {
					change_variable = {
						which = v_GF_auto_colony_equivalent_pop_load
						value = 1
					}
				}
			}
		}

		if = {
			limit = {
				check_variable = {
					which = v_GF_auto_colony_equivalent_pop_load
					value > v_GF_auto_colony_capacity
				}
			}
			set_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = v_GF_auto_colony_equivalent_pop_load
			}
			subtract_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = v_GF_auto_colony_capacity
			}
			divide_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = @GF_auto_colony_boundary_addend
			}
			add_modifier = {
				modifier = GF_auto_colony_boundary_modifier
				mult = this.v_GF_auto_colony_boundary_factor
				days = @GF_auto_colony_boundary_effect_interval
			}
		}
		set_colony_type = col_GF_auto_colony
		planet_event = {
			id = GF_colony.10
			days = @GF_auto_colony_boundary_effect_interval
		}
	}
}




### on_planet_transfer
# FromFrom = Former Owner (if any)
# From = Country scope (new owner)
# This = Planet scope

# 处理球上的人口组装建筑
planet_event = {
	id = GF_colony.2000
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		OR = {
			has_building = building_robot_assembly_plant
			has_building = building_robot_assembly_complex
			has_building = building_machine_assembly_plant
			has_building = building_machine_assembly_complex
		}
		from = { has_authority = GF_auth_commonwealth }
	}

	immediate = {
		remove_building = building_robot_assembly_plant
		remove_building = building_robot_assembly_complex
		remove_building = building_machine_assembly_plant
		remove_building = building_machine_assembly_complex
		add_building = building_GF_doll_factory
	}
}

# 自动化星球建设项目
planet_event = {
	id = GF_colony.5000
	title = GF_colony.5000.name
	desc = GF_colony.5000.desc

	location = this

	diplomatic = yes
	diplomatic_title = GF_colony.5000.diplo_title

	picture_event_data = {
		city_level = this
		planet_background = this
		room = this.owner
		portrait = event_target:project_leader
	}

	custom_gui = GF_automated_city_design_gui
	custom_gui_option = GF_automated_city_design_gui_option

	is_triggered_only = yes

	immediate = {
		if = {
			limit = { exists = leader }
			leader = { save_event_target_as = project_leader }
		}
		else_if = {
			limit = { exists = sector.sector_capital.leader }
			sector.sector_capital.leader = { save_event_target_as = project_leader }
		}
		else = { owner.ruler = { save_event_target_as = project_leader } }

		remove_planet_flag = flag_p_GF_automated_city_base_resources
		remove_planet_flag = flag_p_GF_automated_city_advanced_resources
		remove_planet_flag = flag_p_GF_automated_city_special_resources
		save_global_event_target_as = auto_city

		owner = { set_country_flag = flag_GF_automated_city_terraform_ongoing }
	}

	option = {
		name = GF_colony.5000.a
		is_dialog_only = yes
		response_text = GFAutomatedCityBaseResourceDesc
		allow = {
			hidden:owner = { GF_require_OGAS_has_available_threads = { amount = 2 } }
		}
		custom_tooltip = GF_colony.5000.a.tooltip

		set_planet_flag = flag_p_GF_automated_city_base_resources
		remove_planet_flag = flag_p_GF_automated_city_advanced_resources
		remove_planet_flag = flag_p_GF_automated_city_special_resources
	}
	option = {
		name = GF_colony.5000.b
		is_dialog_only = yes
		response_text = GFAutomatedCityAdvancedResourceDesc
		allow = {
			hidden:owner = { GF_require_OGAS_has_available_threads = { amount = 3 } }
		}
		custom_tooltip = GF_colony.5000.b.tooltip

		set_planet_flag = flag_p_GF_automated_city_advanced_resources
		remove_planet_flag = flag_p_GF_automated_city_base_resources
		remove_planet_flag = flag_p_GF_automated_city_special_resources
	}
	option = {
		name = GF_colony.5000.c
		is_dialog_only = yes
		response_text = GFAutomatedCitySpecialResourceDesc
		allow = {
			hidden:owner = { GF_require_OGAS_has_available_threads = { amount = 4 } }
		}
		custom_tooltip = GF_colony.5000.c.tooltip

		set_planet_flag = flag_p_GF_automated_city_special_resources
		remove_planet_flag = flag_p_GF_automated_city_base_resources
		remove_planet_flag = flag_p_GF_automated_city_advanced_resources
	}

	option = {
		name = GF_colony.5000.sep
		allow = {
			custom_tooltip = {
				fail_text = GF_colony.5000.sep.tooltip
				always = no
			}
		}
	}
	option = {
		name = GF_colony.5000.sep
		allow = {
			custom_tooltip = {
				fail_text = GF_colony.5000.sep.tooltip
				always = no
			}
		}
	}
	option = {
		name = GF_colony.5000.sep
		allow = {
			custom_tooltip = {
				fail_text = GF_colony.5000.sep.tooltip
				always = no
			}
		}
	}

	option = {
		name = CANCEL
		remove_planet_flag = flag_p_GF_automated_city_base_resources
		remove_planet_flag = flag_p_GF_automated_city_advanced_resources
		remove_planet_flag = flag_p_GF_automated_city_special_resources
	}

	option = {
		name = CONFIRM
		allow = {
			custom_tooltip = {
				fail_text = GF_colony.5000.confirm_require
				OR = {
					has_planet_flag = flag_p_GF_automated_city_base_resources
					has_planet_flag = flag_p_GF_automated_city_advanced_resources
					has_planet_flag = flag_p_GF_automated_city_special_resources
				}
			}
		}
		custom_tooltip = GF_colony.5000.confirm_warning
		owner = {
			start_situation = {
				type = GF_automated_city_construction
				target = prev
			}
		}
	}

	after = {
		clear_global_event_target = auto_city
		owner = { remove_country_flag = flag_GF_automated_city_terraform_ongoing }
	}
}

planet_event = {
	id = GF_colony.5005
	hide_window = yes

	is_triggered_only = yes
	trigger = { has_planet_flag = flag_p_GF_automated_city_base_resources }

	immediate = {
		set_variable = {
			which = city_cnt
			value = value:GF_export_district_count|DISTRICT|district_city|FACTOR|0.6|
		}
		change_variable = {
			which = city_cnt
			value = value:GF_export_district_count|DISTRICT|district_industrial|FACTOR|0.4|
		}
		set_variable = {
			which = generator_cnt
			value = value:GF_export_district_count|DISTRICT|district_generator|
		}
		set_variable = {
			which = farming_cnt
			value = value:GF_export_district_count|DISTRICT|district_farming|
		}
		set_variable = {
			which = mining_cnt
			value = value:GF_export_district_count|DISTRICT|district_mining|
		}

		change_pc = pc_GF_automated_city
		while = {
			count = value:GF_variable_operate|VAR|city_cnt|OP|mult|VALUE|0.8|
			add_district = district_GF_automated_nexus
		}
		while = {
			count = value:GF_variable_operate|VAR|generator_cnt|OP|mult|VALUE|0.6|
			add_district = district_GF_automated_energy
		}
		while = {
			count = value:GF_variable_operate|VAR|farming_cnt|OP|mult|VALUE|0.6|
			add_district = district_GF_automated_farming
		}
		while = {
			count = value:GF_variable_operate|VAR|mining_cnt|OP|mult|VALUE|0.6|
			add_district = district_GF_automated_mining
		}
		clear_variable = city_cnt
		clear_variable = generator_cnt
		clear_variable = farming_cnt
		clear_variable = mining_cnt
	}
}

planet_event = {
	id = GF_colony.5006
	hide_window = yes

	is_triggered_only = yes
	trigger = { has_planet_flag = flag_p_GF_automated_city_advanced_resources }

	immediate = {
		set_variable = {
			which = city_cnt
			value = value:GF_export_district_count|DISTRICT|district_city|
		}
		set_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_industrial|FACTOR|0.7|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_generator|FACTOR|0.1|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_farming|FACTOR|0.1|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_mining|FACTOR|0.1|
		}

		change_pc = pc_GF_automated_city
		while = {
			count = value:GF_variable_operate|VAR|city_cnt|OP|mult|VALUE|0.8|
			add_district = district_GF_automated_nexus
		}
		if = {
			limit = { GF_has_foundry_designation = yes }
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.6|
				add_district = district_GF_automated_foundry
			}
		}
		else_if = {
			limit = { GF_has_factory_designation = yes }
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.6|
				add_district = district_GF_automated_industry
			}
		}
		else_if = {
			limit = { GF_has_refinery_designation = yes }
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.6|
				add_district = district_GF_automated_refinery
			}
		}
		else = {
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.3|
				add_district = district_GF_automated_foundry
			}
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.3|
				add_district = district_GF_automated_industry
			}
		}
		clear_variable = city_cnt
		clear_variable = industrial_cnt
	}
}

planet_event = {
	id = GF_colony.5007
	hide_window = yes

	is_triggered_only = yes
	trigger = { has_planet_flag = flag_p_GF_automated_city_special_resources }

	immediate = {
		set_variable = {
			which = city_cnt
			value = value:GF_export_district_count|DISTRICT|district_city|
		}
		set_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_industrial|FACTOR|0.55|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_generator|FACTOR|0.1|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_farming|FACTOR|0.1|
		}
		change_variable = {
			which = industrial_cnt
			value = value:GF_export_district_count|DISTRICT|district_mining|FACTOR|0.1|
		}

		change_pc = pc_GF_automated_city
		while = {
			count = value:GF_variable_operate|VAR|city_cnt|OP|mult|VALUE|0.8|
			add_district = district_GF_automated_nexus
		}
		if = {
			limit = {
				OR = {
					GF_has_foundry_designation = yes
					GF_has_factory_designation = yes
				}
			}
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.6|
				add_district = district_GF_collapse
			}
		}
		else_if = {
			limit = { GF_has_refinery_designation = yes }
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.6|
				add_district = district_GF_automated_reverse_collapse
			}
		}
		else_if = {
			limit = { has_research_designation = yes }
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.36|
				add_district = district_GF_automated_research
			}
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.24|
				add_district = district_GF_automated_factory
			}
		}
		else = {
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.36|
				add_district = district_GF_automated_research
			}
			while = {
				count = value:GF_variable_operate|VAR|industrial_cnt|OP|mult|VALUE|0.24|
				add_district = district_GF_automated_collapse
			}
		}
		clear_variable = city_cnt
		clear_variable = industrial_cnt
	}
}

planet_event = {
	id = GF_colony.5010
	title = GF_colony.5010.name
	desc = GF_colony.5010.desc
	picture = GFX_evt_city_planet
	show_sound = event_cityscape
	location = this

	is_triggered_only = yes

	option = {
		name = GF_colony.5010.a
		add_modifier = {
			modifier = GF_automated_city_construction_ongoing
			days = 540
		}
	}
}
