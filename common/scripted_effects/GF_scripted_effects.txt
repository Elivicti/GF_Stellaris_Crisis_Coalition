# this = any
GF_set_mod_version = {
	event_target:global_event_country = {
		set_variable = {
			which = v_GF_Stellaris_MOD_VER
			value = $VALUE$
		}
	}
}

# this = country
GF_set_can_research_tech = {
	set_country_flag = flag_can_research_$TECH$
}

# this = country
GF_set_cannot_research_tech = {
	remove_country_flag = flag_can_research_$TECH$
}

# this = country
GF_set_can_research_basic_doll_tech = {
	set_country_flag = flag_can_research_GF_tech_doll_assemble
	set_country_flag = flag_can_research_GF_tech_mind_upgrade_1
	set_country_flag = flag_can_research_GF_tech_doll_modding_point_1
}

# this = country
GF_set_cannot_research_basic_doll_tech = {
	remove_country_flag = flag_can_research_GF_tech_doll_assemble
	remove_country_flag = flag_can_research_GF_tech_mind_upgrade_1
	remove_country_flag = flag_can_research_GF_tech_doll_modding_point_1
}

# this = planet
GF_spawn_elid_invasion = {
	while = {
		count = value:GF_elid_spawn_count|mult|$MULT|1$|add|$ADD|0$|
		create_army = {
			type = $TYPE$
			name = NAME_$TYPE$
			owner = event_target:aggressive_elid_country
			species = event_target:aggressive_elid_species
		}
	}
}

# this = planet
GF_begin_contaminated_zone_battle = {
	set_planet_flag = flag_p_GF_battle_in_contaminated_zone
	set_planet_flag = flag_p_GF_battle_in_$ZONE$
}
GF_end_contaminated_zone_battle = {
	remove_planet_flag = flag_p_GF_battle_in_contaminated_zone
	remove_planet_flag = flag_p_GF_battle_in_d_GF_black_zone
	remove_planet_flag = flag_p_GF_battle_in_d_GF_red_zone
	remove_planet_flag = flag_p_GF_battle_in_d_GF_yellow_zone
}

# this = planet
GF_remove_elid_invasion_army = {
	# 移除ELID陆军
	every_planet_army = {
		limit = {
			OR = {
				army_type = GF_army_hostile_elid
				army_type = GF_army_hostile_elid_boss
			}
		}
		remove_army = yes
	}
	set_controller = owner
}

# this = planet
GF_increase_elid_threat = {
	custom_tooltip_with_params = {
		description = GF_elid_threat_level_increased
		description_parameters = {
			VALUE = $VALUE$
		}
	}
	hidden_effect = {
		change_variable = {
			which = v_GF_elid_threat_level
			value = $VALUE$
		}
		GF_update_elid_threat_modifier = yes
	}
}

GF_decrease_elid_threat = {
	custom_tooltip_with_params = {
		description = GF_elid_threat_level_decreased
		description_parameters = {
			VALUE = $VALUE$
		}
	}
	hidden_effect = {
		subtract_variable = {
			which = v_GF_elid_threat_level
			value = $VALUE$
		}
		GF_update_elid_threat_modifier = yes
	}
}

# this = planet
GF_update_elid_threat_modifier = {
	remove_modifier = GF_pm_elid_threat_level_low
	remove_modifier = GF_pm_elid_threat_level_mid
	remove_modifier = GF_pm_elid_threat_level_high
	if = {
		limit = { is_variable_set = v_GF_elid_threat_level }
		if = {
			limit = {
				check_variable = {
					which = v_GF_elid_threat_level
					value <= 0
				}
			}
			# final victory
			planet_event = { id = GF_elid.1030 }
		}
		else_if = { # threat level is less than 2
			limit = {
				check_variable = {
					which = v_GF_elid_threat_level
					value <= @GF_elid_threat_low_threshold
				}
				GF_elid_threat_exists = yes
			}
			add_modifier = { modifier = GF_pm_elid_threat_level_low days = -1 }
		}
		else_if = { # threat level is (2, 6]
			limit = {
				check_variable = {
					which = v_GF_elid_threat_level
					value <= @GF_elid_threat_mid_threshold
				}
				check_variable = {
					which = v_GF_elid_threat_level
					value > @GF_elid_threat_low_threshold
				}
			}
			add_modifier = { modifier = GF_pm_elid_threat_level_mid days = -1 }
		}
		else = { # threat level is bigger than 6
			add_modifier = { modifier = GF_pm_elid_threat_level_high days = -1 }
		}
	}
}

@GF_relic_site_jump_distance_min = 1
@GF_relic_site_jump_distance_max = 4

# this = system (source)
GF_create_collapse_relic_site = {
	random_system = {
		limit = {
			NOT = { has_star_flag = flag_s_GF_has_collapse_relic_site_in_system }
			OR = {
				NOT = { exists = space_owner }
				space_owner = { is_same_empire = prevprev.space_owner }
			}
			distance = {
				source = prev
				min_jumps = @GF_relic_site_jump_distance_min
				max_jumps = @GF_relic_site_jump_distance_max
			}
			NOT = {
				any_neighbor_system = {
					OR = {
						has_star_flag = flag_s_GF_has_collapse_relic_site_in_system
						AND = {
							exists = space_owner
							space_owner = { is_fallen_empire_xenophobe = yes }
						}
					}
				}
			}
			any_system_planet = { GF_collapse_relic_site_requirements = yes }
		}
		set_star_flag = flag_s_GF_has_collapse_relic_site_in_system
		random_system_planet = {
			limit = { GF_collapse_relic_site_requirements = yes }
			set_planet_flag = flag_p_GF_collapse_relic_site_$index$
			create_archaeological_site = GF_collapse_relic_site
			save_event_target_as = relic_site_target_$index$
		}
	}
	space_owner = { set_visited = event_target:relic_site_target_$index$.solar_system }
}

@GF_sf_event_system_jump_distance_min = 2
@GF_sf_event_system_jump_distance_max = 8

# this = system (source)
GF_select_sf_event_target = {
	$OWNER$ = { save_event_target_as = event_owner }
	save_event_target_as = source_system
	while = {
		limit = { NOT = { exists = event_target:$EVENT_TARGET$ } }
		closest_system = {
			limit = {
				NOT = { has_star_flag = flag_s_GF_sf_event_system }
				distance = {
					source = prev
					min_jumps = @GF_sf_event_system_jump_distance_min
					max_jumps = @GF_sf_event_system_jump_distance_max
				}
				OR = {
					NOT = { exists = space_owner }
					space_owner = {
						is_same_value = event_target:event_owner
					}
				}
				NOT = {
					any_fleet_in_system = {
						owner = { is_hostile_to = event_target:event_owner }
					}
				}
				any_system_planet = {
					OR = {
						[[ASTEROID]     is_asteroid     = $ASTEROID$     ]
						[[PLANET_CLASS] is_planet_class = $PLANET_CLASS$ ]
					}
					has_anomaly = no
					NOR = {
						has_planet_flag = suppress_archaeological_sites
						exists = archaeological_site
					}
				}
			}
			random_system_planet = {
				limit = {
					OR = {
						[[ASTEROID]     is_asteroid     = $ASTEROID$     ]
						[[PLANET_CLASS] is_planet_class = $PLANET_CLASS$ ]
					}
					has_anomaly = no
					NOR = {
						has_planet_flag = suppress_archaeological_sites
						exists = archaeological_site
					}
				}
				save_event_target_as = $EVENT_TARGET$
			}
		}
	}

	event_target:$EVENT_TARGET$.solar_system = {
		set_star_flag = flag_s_GF_sf_event_system
	}
	event_target:event_owner = {
		set_visited = event_target:$EVENT_TARGET$.solar_system
	}
}

# this = system
GF_ensure_sf_event_barren_planet = {
	if = {
		limit = {
			NOT = { any_system_planet = { is_planet_class = pc_barren } }
		}
		random_system_planet = {
			limit = {
				NOR = {
					is_star = yes
					is_moon = yes
					is_asteroid = yes
					is_planet_class = pc_gas_giant
					is_urban_planet = yes
				}
			}
			change_pc = pc_barren
			reroll_planet = yes
			set_planet_flag = flag_p_GF_sf_event_barren_candidate
			set_planet_flag = suppress_archaeological_sites
			prevent_anomaly = yes
		}
	}
	else = {
		every_system_planet = {
			limit = { is_planet_class = pc_barren }
			set_planet_flag = flag_p_GF_sf_event_barren_candidate
			set_planet_flag = suppress_archaeological_sites
			prevent_anomaly = yes
		}
	}
}

# this = planet
GF_randomize_sf_event_barren_planet = {
	random_list = {
		22 = {
			modifier = {
				factor = 0
				OR = {
					is_star = yes
					is_moon = yes
					is_asteroid = yes
					is_planet_class = pc_gas_giant
					is_urban_planet = yes
				}
			}
			change_pc = pc_barren
			reroll_planet = yes
			set_planet_flag = flag_p_GF_sf_event_barren_candidate
			set_planet_flag = suppress_archaeological_sites
			prevent_anomaly = yes
		}
		78 = {}
	}
}

# required scope: planet
GF_create_black_zone_deposit = {
	if = {
		limit = { planet_size > 20 }
		while = {
			count = 3
			add_deposit = d_GF_black_zone_extra
			add_deposit = d_GF_red_zone_extra
		}
		random = {
			chance = 25
			while = {
				count = 2
				add_deposit = d_GF_black_zone_extra
			}
		}
		random = {
			chance = 50
			while = {
				count = 2
				add_deposit = d_GF_black_zone_extra
			}
		}
		random = {
			chance = 75
			while = {
				count = 3
				add_deposit = d_GF_red_zone_extra
			}
		}
	}
	else_if = {
		limit = {
			planet_size >= 15
			planet_size <= 20
		}
		while = {
			count = 2
			add_deposit = d_GF_black_zone_extra
		}
		add_deposit = d_GF_red_zone_extra
		random = {
			chance = 25
			while = {
				count = 2
				add_deposit = d_GF_black_zone_extra
			}
		}
		random = {
			chance = 50
			while = {
				count = 1
				add_deposit = d_GF_black_zone_extra
			}
		}
		random = {
			chance = 75
			while = {
				count = 3
				add_deposit = d_GF_red_zone_extra
			}
		}
	}
	else = {
		while = {
			count = 2
			add_deposit = d_GF_black_zone_extra
			add_deposit = d_GF_red_zone_extra
		}
		random = {
			chance = 50
			add_deposit = d_GF_black_zone_extra
		}
		random = {
			chance = 75
			while = {
				count = 2
				add_deposit = d_GF_red_zone_extra
			}
		}
	}
}

# 扣除锡安项目所需的资源
# 需要$TIER$ * $RES$月收入的$RES$，最少为@GF_zion_project_$RES$_cost_$TIER$（定义于GF_scripted_variables.txt）
# scope = country
# scope = country
GF_zion_project_cost = {
	add_resource = {
		$RES$ = -1
		mult = value:GF_monthly_resource_income|RES|$RES$|MULT|$TIER$|MIN|@GF_zion_project_$RES$_cost_$TIER$|
	}
}

# scope = country
GF_enable_zion_project = {
	if = {
		limit = { NOT = { has_event_chain = GF_secrets_of_zion_event_chain } }
		begin_event_chain = {
			event_chain = GF_secrets_of_zion_event_chain
			target = this
		}
	}
	enable_special_project = {
		name = $PROJECT$
		owner = root
	}
}

# scope = country, 检测项目，结束“锡安的秘密”事件链
GF_end_zion_secrets_event_chain = {
	if = {
		limit = {
			has_event_chain = GF_secrets_of_zion_event_chain
			NOR = {
				has_special_project = SP_GF_ZION_ELID_ARMY_PROJECT
				has_special_project = SP_GF_ZION_MINI_COLLAPSE_WEAPON_PROJECT
				has_special_project = SP_GF_ZION_COLLAPSE_SLINGSHOT_PROJECT
				has_special_project = SP_GF_ZION_ORB_MAINFRAME_ALPHA_PROJECT
				has_special_project = SP_GF_DATA_SINGULARITY_PROJECT
			}
		}
		end_event_chain = GF_secrets_of_zion_event_chain
	}
}

@GF_zion_favor_upper_limit = 200

# 更改锡安的评价，上限为@GF_zion_favor_upper_limit，无下限
# scope = country
GF_change_zion_favor = {
	custom_tooltip_with_params = {
		description = GF_change_zion_favor_tooltip
		description_parameters = { VALUE = $VALUE$ }
	}
	hidden_effect = {
		change_variable = {
			which = v_GF_zion_favor
			value = $VALUE$
		}
		if = {
			limit = {
				check_variable = {
					which = v_GF_zion_favor
					value >= @GF_zion_favor_upper_limit
				}
			}
			set_variable = {
				which = v_GF_zion_favor
				value = @GF_zion_favor_upper_limit
			}
		}
	}
}

# this = country
GF_set_zion_deep_dive_cooldown_notification_yes = {
	custom_tooltip_with_params = {
		description = GF_add_zion_deep_dive_cooldown_tooltip
		description_parameters = {
			YEARS = $YEARS|5$
		}
	}
	hidden_effect = {
		country_event = {
			id = GF_zion_project.34000
			days = @GF_zion_cooldown_delay_years_$YEARS|5$
		}
	}
}
GF_set_zion_deep_dive_cooldown_notification_no = {}

# this = country
GF_set_zion_deep_dive_cooldown = {
	hidden_effect = {
		if = {
			limit = { has_modifier = GF_zion_deep_dive_cooldown }
			remove_modifier = GF_zion_deep_dive_cooldown
		}
	}

	[[INF]
		custom_tooltip = GF_add_zion_deep_dive_cooldown_tooltip_inf
		hidden_effect = {
			add_modifier = { modifier = GF_zion_deep_dive_cooldown }
			set_country_flag = flag_GF_inf_zion_deep_dive_cooldown
		}
	]

	[[!INF]
		GF_set_zion_deep_dive_cooldown_notification_$NOTIFICATION|yes$ = {
			YEARS = $YEARS|5$
		}
		hidden_effect = {
			remove_country_flag = flag_GF_inf_zion_deep_dive_cooldown
			add_modifier = {
				modifier = GF_zion_deep_dive_cooldown
				years = $YEARS|5$
			}
			set_saved_date = {
				key = GF_zion_cooldown_date
				days_from_present = value:years_to_days|YEARS|$YEARS|5$|
			}
		}
	]

}

# scope = planet
GF_construct_railway_line_effect = {
	add_deposit = d_GF_railway_hub
	hidden_effect = {
		if = {
			limit = { NOT = { is_variable_set = v_GF_armored_train_capacity } }
			set_variable = {
				which = v_GF_armored_train_capacity
				value = 1
			}
		}
		change_variable = {
			which = v_GF_armored_train_capacity
			value = 1
		}
	}
}


# scope = country
GF_convert_to_OGAS_subnet = {
	optimize_memory
	# 附庸特化：OGAS子网
	save_event_target_as = GF_vassal_subnet
	# create_country = {
	# 	type = faction
	# 	effect = {
	# 		copy_ethos_and_authority = event_target:GF_vassal_subnet
	# 	}
	# }
	event_target:GF_ogas_owner = {
		random_owned_species = {
			limit = { has_trait = GF_trait_doll }
			save_event_target_as = doll_species
		}
	}

	store_country_backup_data = {
		flag = yes
		room = yes
		name = yes
		ethics = yes
		government = yes
	}
	
	change_government = {
		authority = GF_auth_OGAS_subnet
		civics = random
	}
	add_intel = { amount = 100 who = from }
	ruler = {
		save_event_target_as = GF_OGAS_subnet_previous_ruler
		set_leader_flag = flag_GF_OGAS_subnet_previous_ruler
	}
	event_target:GF_ogas_country = {
		clone_leader = {
			target = event_target:GF_ogas_leader
			event_leader = yes

			skip_background_generation = yes
			background_ethic = ethic_materialist
			custom_description = GF_ogas_subnet_leader_desc
			background_planet = event_target:GF_home_world

			effect = {
				set_leader_flag = flag_GF_ogas_subnet_leader_@event_target:GF_vassal_subnet
				set_leader_flag = legendary_leader				# 传奇领袖
				set_leader_flag = immune_to_negative_traits		# 免疫负面特质
				set_leader_flag = leader_death_events_blocked   # 禁止原版死亡事件
				save_event_target_as = GF_ogas_leader_subnet
				remove_trait = GF_trait_leader_doll
				remove_trait = GF_trait_leader_ogas_2
				remove_trait = GF_trait_leader_ogas
				add_trait = GF_trait_leader_ogas_subnet_core
			}
		}
		establish_communications_no_message = prev
	}
	event_target:GF_ogas_leader_subnet = {
		set_owner = prev
	}
	assign_leader = event_target:GF_ogas_leader_subnet
	country_event = {
		id = GF_overlord.1000
		days = 30
	}
	# 添加基础资源
	add_resource = {
		energy = 100
		minerals = 100
		food = 100
		alloys = 100
		consumer_goods = 100
		gf_core_chip = 100
		
		unity = 1000
	}
	every_owned_pop = {
		limit = {
			is_robot_pop = yes
			NOT = { has_trait = GF_trait_doll }
		}
		change_species = event_target:doll_species
	}
	every_owned_planet = {
		# 添加42lab
		if = {
			limit = {
				free_building_slots > 0
				NOR = {
					has_building = building_GF_42lab_1
					has_building = building_GF_42lab_2
					has_building = building_GF_42lab_3
				}
			}
			add_building = building_GF_42lab_1
		}
		# 移除原版机器人组装建筑并替换为少前的
		while = {
			limit = { has_building = building_robot_assembly_plant }
			remove_building = building_robot_assembly_plant
			add_building = building_GF_doll_factory
		}
		while = {
			limit = { has_building = building_robot_assembly_complex }
			remove_building = building_machine_assembly_complex
			add_building = building_GF_doll_factory
		}
		if = {
			limit = {
				free_building_slots > 0
				NOT = { has_building = building_GF_doll_factory }
			}
			add_building = building_GF_doll_factory
		}
		if = {
			limit = {
				NOT = { any_owned_pop = { is_same_species_class = event_target:doll_species } }
			}
			create_pop = { species = event_target:doll_species }
		}
	}
	set_country_flag = flag_GF_can_have_advanced_feature
	GF_set_can_research_basic_doll_tech = yes
	give_technology = { tech = GF_tech_doll_assemble }
	set_built_species = event_target:doll_species
	set_variable = {
		which = v_GF_subnet_duration_months
		value = 1
	}
}

GF_deactivate_OGAS_subnet = {
	optimize_memory
	# change_government = {
	# 	authority = random
	# 	civics = random
	# }
	save_event_target_as = GF_vassal_subnet
	ruler = {
		save_event_target_as = GF_ogas_leader_subnet
	}
	if = {
		limit = { NOT = { exists = event_target:GF_OGAS_subnet_previous_ruler } }
		create_leader = {
			class = official
			species = this
			skill = 1
			leader_age_max = 27

			effect = {
				remove_all_traits = yes
				add_trait_no_notify = trait_ruler_eye_for_talent
				save_event_target_as = GF_OGAS_subnet_previous_ruler
				add_skill_without_trait_selection = 3
			}
		}
	}
	assign_leader = event_target:GF_OGAS_subnet_previous_ruler
	event_target:GF_ogas_leader_subnet = {
		kill_leader = { show_notification = no }
	}
	restore_country_backup_data = yes
	remove_communications = event_target:GF_ogas_country

	if = {
		limit = { has_country_flag = flag_GF_commonwealth_vassal_OGAS_subnet_3 }
		event_target:GF_ogas_owner = {
			GF_check_OGAS_threads_over_cap_effect = { from	= prev }
		}
	}

	remove_country_flag = flag_GF_commonwealth_vassal_OGAS_subnet_2
	remove_country_flag = flag_GF_commonwealth_vassal_OGAS_subnet_3
	remove_country_flag = flag_GF_can_have_advanced_feature
	GF_set_cannot_research_basic_doll_tech = yes
}

@GF_OGAS_mission_duration = 3600

# scope = country
GF_set_ogas_mission = {
	if = {
		limit = { has_country_flag = flag_GF_ogas_owner }
		add_modifier = { modifier = $modifier$ }
	}
	else = {
		add_modifier = {
			modifier = $modifier$
			days = @GF_OGAS_mission_duration
		}
		hidden_effect = {
			set_timed_country_flag = {
				flag = GF_ogas_work_mode
				days = @GF_OGAS_mission_duration
			}
			country_event = {
				id = GF_overlord.11001
				days = @GF_OGAS_mission_duration
			}
		}
	}
}

# scope = country
GF_end_ogas_mission = {
	if = {
		limit = { has_modifier = $modifier$ }
		remove_modifier = $modifier$
	}
}

# scope = country
GF_remove_all_ogas_mission_modifier = {
	GF_end_ogas_mission = { modifier = GF_ogas_mode_governor }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_produce }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_upkeep }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_war }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_research }

	GF_end_ogas_mission = { modifier = GF_ogas_mode_produce_2 }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_research_2 }
	GF_end_ogas_mission = { modifier = GF_ogas_mode_empire }
}

# scope = country
GF_end_ogas_mission_if_threads_over_cap = {
	if = {
		limit = {
			GF_OGAS_has_used_threads_over_cap = yes
			has_modifier = $modifier$
		}
		remove_modifier = $modifier$
	}
}

# scope = GF country
GF_change_ogas_threads = {
	if = {
		limit = { has_authority = GF_auth_commonwealth }
		change_variable = {
			which = v_GF_ogas_threads_available
			value = $value$
		}
		if = {	# 可用线程最大为 5
			limit = {
				check_variable = {
					which = v_GF_ogas_threads_available
					value > 5
				}
			}
			set_variable = {
				which = v_GF_ogas_threads_available
				value = 5
			}
		}
		if = {	# 可用线程最小为 1
			limit = {
				check_variable = {
					which = v_GF_ogas_threads_available
					value <= 0
				}
			}
			set_variable = {
				which = v_GF_ogas_threads_available
				value = 1
			}
		}
	}
}

# this = country, 必须指定from，5天后触发
GF_check_OGAS_threads_over_cap_effect = {
	country_event = {
		id = GF_evt_misc.100
		days = 5
		scopes = { from = $from$ }
	}
}

# scope = GF country
GF_update_OGAS_threads_variable = {
	if = {
		limit = { has_authority = GF_auth_commonwealth }
		export_modifier_to_variable = {
			modifier = GF_OGAS_threads_add
			variable = v_GF_ogas_threads_available
		}
		export_modifier_to_variable = {
			modifier = GF_OGAS_threads_used_add
			variable = v_GF_ogas_threads_used
		}
	}
}

# scope = country
GF_clear_core_chip_deficit_flags = {
	remove_country_flag = flag_GF_deficit_core_chip_approach_programmer_subsidies
	remove_country_flag = flag_GF_deficit_core_chip_approach_dismantle_doll
	remove_country_flag = flag_GF_deficit_core_chip_approach_assimilate_doll
}

# this = planet
GF_collapse_planet_effect = {
	every_owned_pop = { kill_pop = yes }
	remove_all_buildings = yes
	# destroy habitats and ringworlds
	if = {
		limit = { GF_is_habitat = yes }
		spawn_habitat_cracker_effect = yes
		remove_planet = yes
	}
	else_if = {
		limit = { is_ringworld = yes }
		spawn_ringworld_cracker_effect = yes
		change_pc = pc_ringworld_habitable_damaged
	}
	else_if = {
		limit = { is_planet_class = pc_cosmogenesis_world }
		spawn_lathe_cracker_effect = yes
	}
	else_if = {
		limit = { habitable_planet = yes }
		change_pc = pc_GF_collapsed
		clear_deposits = yes
		add_modifier = {
			modifier = collapsed_terraforming_candidate
			days = -1
		}

		add_deposit = d_society_10
	}
	else = {
		change_pc = pc_GF_collapsed_not_habitable
		clear_deposits = yes
	}
}

# this = any
GF_remove_computing_center_effect = {
	$target$ = {
		solar_system = {
			every_ambient_object = {
				limit = { has_ambient_object_flag = GF_computing_center_ambient }
				destroy_ambient_object = this
			}
		}
	}
	remove_megastructure = $target$
}

# this = country, add_modifier if mult > 0, otherwise do nothing/remove modifier if exists
GF_add_effective_modifier = {
	if = {
		limit = {
			check_variable = {
				which = $MULT$
				value > 0
			}
		}
		add_modifier = {
			modifier = $MODIFIER$
			mult = $MULT$
			[[PERIOD] $PERIOD$ = $DURATION$ ]
		}
	}
	else = {
		if = {
			limit = { has_modifier = $MODIFIER$ }
			remove_modifier = $MODIFIER$
		}
	}
}

# this = country
GF_add_doll_cloud_network_node_traits = {
	while = {
		count = ruler.v_GF_$CLASS$_doll
		random_owned_leader = {
			limit = {
				GF_is_doll_leader = yes
				leader_class = $CLASS$
				NOT = { has_trait = GF_trait_leader_doll_cloud_network_node }
			}
			add_timed_trait = {
				trait = GF_trait_leader_doll_cloud_network_node
				days = prev.value:GF_doll_cloud_network_trait_duration
			}
		}
	}
}

# this = country
GF_calculate_OGAS_threads_statistics = {
	# threads source
	set_variable = {
		which = v_GF_threads_from_leader
		value = value:GF_get_thread_count_from_leader
	}
	set_variable = {
		which = v_GF_threads_from_computing_center
		value = value:GF_get_thread_count_from_computing_center
	}
	set_variable = {
		which = v_GF_threads_from_tech
		value = value:GF_get_thread_count_from_tech
	}
	if = {
		limit = {
			any_owned_planet = {
				has_building = building_GF_subnet_communication_nexus
				check_modifier_value = {
					modifier = GF_OGAS_threads_from_subnet
					value > 0
				}
			}
		}
		random_owned_planet = {
			limit = { has_building = building_GF_subnet_communication_nexus }
			save_event_target_as = GF_subnet_nexus
		}
		set_variable = {
			which = v_GF_threads_from_subnet
			value = event_target:GF_subnet_nexus.value:GF_get_thread_count_from_subnet
		}
	}

	# threads usage
	set_variable = {
		which = v_GF_threads_usage_from_OGAS_mode
		value = value:GF_get_thread_usage_from_OGAS_mode
	}
	set_variable = {
		which = v_GF_threads_usage_from_auto_city
		value = value:GF_get_thread_usage_from_auto_city
	}
	set_variable = {
		which = v_GF_threads_usage_from_auto_city_construction
		value = value:GF_get_thread_usage_from_auto_city_construction
	}
}

# this = country
GF_show_OGAS_threads_statistics = {
	custom_tooltip = GF_ogas.threads_source_tooltip
	custom_tooltip = GF_ogas.threads_from_leader
	if = {
		limit = {
			any_owned_planet = {
				has_building = building_GF_subnet_communication_nexus
				check_modifier_value = {
					modifier = GF_OGAS_threads_from_subnet
					value > 0
				}
			}
		}
		custom_tooltip = GF_ogas.threads_from_subnet
	}
	if = {
		custom_tooltip = GF_ogas.threads_from_tech
		limit = { has_technology = GF_tech_ternary_quantum_computing }
	}
	if = {
		custom_tooltip = GF_ogas.threads_from_computing_center
		limit = {
			any_owned_megastructure = {
				GF_is_working_computing_center = yes
			}
		}
	}
	if = {
		limit = {
			check_modifier_value = {
				modifier = GF_OGAS_threads_used_add
				value > 0
			}
		}
		custom_tooltip = GF_ogas.threads_usage_tooltip
	}
	if = {
		custom_tooltip = GF_ogas.threads_usage_from_OGAS_mode
		limit = {
			OR = {
				has_modifier = GF_ogas_mode_governor
				has_modifier = GF_ogas_mode_produce
				has_modifier = GF_ogas_mode_upkeep
				has_modifier = GF_ogas_mode_war
				has_modifier = GF_ogas_mode_research
				has_modifier = GF_ogas_mode_produce_2
				has_modifier = GF_ogas_mode_research_2
				has_modifier = GF_ogas_mode_empire
			}
		}
	}
	if = {
		custom_tooltip = GF_ogas.threads_usage_from_auto_city_construction
		limit = {
			any_situation = {
				is_situation_type = GF_automated_city_construction
				OR = {
					current_stage = stage_2
					current_stage = stage_3
				}
			}
		}
	}
	if = {
		custom_tooltip = GF_ogas.threads_usage_from_auto_city
		limit = { any_owned_planet = { is_planet_class = pc_GF_automated_city } }
	}
}

# this = fleet
GF_set_RC_beacon_fleet_cooldown = {
	remove_fleet_flag = flag_f_GF_RC_beacon_deployed
	set_timed_fleet_flag = {
		flag = flag_f_GF_RC_beacon_deployment_cooldown
		days = @GF_reverse_collapse_beacon_cooldown_days
	}
	set_saved_date = {
		key = GF_RC_beacon_deployment_cooldown_finish_date
		days_from_present = @GF_reverse_collapse_beacon_cooldown_days
	}
}

# this = planet
GF_autocity_construction_complete_effect = {
	planet_event = { id = GF_colony.5005 }
	planet_event = { id = GF_colony.5006 }
	planet_event = { id = GF_colony.5007 }
	# 通知
	planet_event = { id = GF_colony.5010 }

	clear_deposits = yes
	clear_planet_modifiers = yes
	add_modifier = { modifier = GF_automated_city_status }

	remove_all_buildings = yes
	add_building = building_GF_connection_nexus
	if = {
		limit = { exists = orbital_defence }
		orbital_defence.starbase = {
			set_starbase_size = orbital_ring_tier_3
		}
	}
	GF_make_autocity_district_effect = yes
}
# this = planet
GF_make_autocity_district_effect = {
	set_variable = {
		which = v_GF_automated_city_district_count_bonus
		value = value:GF_autocity_size_district_count_bonus
	}
	set_variable = {
		which = v_GF_automated_city_district_empire_size_penalty
		value = value:GF_autocity_size_district_empire_size_penalty
	}
	add_deposit = d_GF_autocity
}